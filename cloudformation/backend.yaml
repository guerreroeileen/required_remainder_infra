AWSTemplateFormatVersion: '2010-09-09'
Description: Backend Spring Boot infra with Elastic Beanstalk, ECR, VPC, and ALB

Parameters:
  ContainerImage:
    Type: String
    Description: Docker image URI to deploy
    Default: nginx:alpine
  ECRRepositoryName:
    Type: String
    Default: required-remainder-backend
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  ContainerPort:
    Type: Number
    Default: 8080
  DeployService:
    Type: String
    Default: false
    AllowedValues: [true, false]
  Environment:
    Type: String
    Description: Environment (dev, staging, prod)
    Default: dev
    AllowedValues: [dev, staging, prod]
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type for Elastic Beanstalk
  MinSize:
    Type: Number
    Default: 1
    Description: Minimum number of instances
  MaxSize:
    Type: Number
    Default: 2
    Description: Maximum number of instances

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: required-remainder-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: required-remainder-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: required-remainder-public-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: false
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only 2 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 2
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticbeanstalk.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  ElasticBeanstalkEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws-elasticbeanstalk-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  ElasticBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: aws-elasticbeanstalk-ec2-role
      Roles:
        - !Ref ElasticBeanstalkEC2Role

  ElasticBeanstalkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ElasticBeanstalkSecurityGroup
      GroupDescription: Security group for Elastic Beanstalk environment
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: required-remainder-backend
      Description: Required Remainder Backend Application




Conditions:
  DeployServiceCondition: !Equals [!Ref DeployService, 'true']

Outputs:
  VPCId:
    Value: !Ref VPC
    Export:
      Name: RequiredRemainderVPCId

  ECRRepoUri:
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: RequiredRemainderECRRepo

  ElasticBeanstalkApplicationName:
    Value: !Ref ElasticBeanstalkApplication
    Export:
      Name: RequiredRemainderEBApplication

  ElasticBeanstalkSecurityGroupId:
    Value: !Ref ElasticBeanstalkSecurityGroup
    Export:
      Name: RequiredRemainderEBSecurityGroup


